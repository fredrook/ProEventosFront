import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { CurrencyMaskDirective } from "./currency-mask.directive";
import { CURRENCY_MASK_CONFIG } from "./currency-mask.config";
import * as ɵngcc0 from '@angular/core';
var NgxCurrencyModule = /** @class */ (function () {
    function NgxCurrencyModule() {
    }
    NgxCurrencyModule.forRoot = function (config) {
        return {
            ngModule: NgxCurrencyModule,
            providers: [{
                    provide: CURRENCY_MASK_CONFIG,
                    useValue: config,
                }]
        };
    };
NgxCurrencyModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxCurrencyModule });
NgxCurrencyModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgxCurrencyModule_Factory(t) { return new (t || NgxCurrencyModule)(); }, imports: [[CommonModule, FormsModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxCurrencyModule, { declarations: function () { return [CurrencyMaskDirective]; }, imports: function () { return [CommonModule, FormsModule]; }, exports: function () { return [CurrencyMaskDirective]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxCurrencyModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, FormsModule],
                declarations: [CurrencyMaskDirective],
                exports: [CurrencyMaskDirective]
            }]
    }], function () { return []; }, null); })();
    return NgxCurrencyModule;
}());
export { NgxCurrencyModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VycmVuY3ktbWFzay5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIm5neC1jdXJyZW5jeS9zcmMvY3VycmVuY3ktbWFzay5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFzQixRQUFRLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDNUQsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQzdDLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUNoRSxPQUFPLEVBQUMsb0JBQW9CLEVBQXFCLE1BQU0sd0JBQXdCLENBQUM7O0FBRWhGO0FBQ3lDLElBRHpDO0FBQ21CLElBY25CLENBQUM7QUFDRCxJQVZTLHlCQUFPLEdBQWQsVUFBZSxNQUEwQjtBQUFJLFFBQzNDLE9BQU87QUFDWCxZQUFNLFFBQVEsRUFBRSxpQkFBaUI7QUFDakMsWUFBTSxTQUFTLEVBQUUsQ0FBQztBQUNsQixvQkFBUSxPQUFPLEVBQUUsb0JBQW9CO0FBQ3JDLG9CQUFRLFFBQVEsRUFBRSxNQUFNO0FBQ3hCLGlCQUFPLENBQUM7QUFDUixTQUFLLENBQUE7QUFDTCxJQUFFLENBQUM7cURBZEYsUUFBUSxTQUFDO2FBQ1IsT0FBTyxFQUFFLENBQUUsWUFBWSxFQUFFLFdBQVcsQ0FBRSxzQkFDdEMsWUFBWSxFQUFFLENBQUUscUJBQXFCLENBQUUsc0JBQ3ZDLE9BQU8sRUFBRSxDQUFFLHFCQUFxQixDQUFFLGtCQUNuQzs7Ozs7Ozs7O2dEQUNRO0FBQUMsSUFVVix3QkFBQztBQUNBLENBREEsQUFmRCxJQWVDO0FBQ0QsU0FYYSxpQkFBaUI7QUFDN0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge01vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Q29tbW9uTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtGb3Jtc01vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHtDdXJyZW5jeU1hc2tEaXJlY3RpdmV9IGZyb20gXCIuL2N1cnJlbmN5LW1hc2suZGlyZWN0aXZlXCI7XG5pbXBvcnQge0NVUlJFTkNZX01BU0tfQ09ORklHLCBDdXJyZW5jeU1hc2tDb25maWd9IGZyb20gXCIuL2N1cnJlbmN5LW1hc2suY29uZmlnXCI7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFsgQ29tbW9uTW9kdWxlLCBGb3Jtc01vZHVsZSBdLFxuICBkZWNsYXJhdGlvbnM6IFsgQ3VycmVuY3lNYXNrRGlyZWN0aXZlIF0sXG4gIGV4cG9ydHM6IFsgQ3VycmVuY3lNYXNrRGlyZWN0aXZlIF1cbn0pXG5leHBvcnQgY2xhc3MgTmd4Q3VycmVuY3lNb2R1bGUge1xuICBzdGF0aWMgZm9yUm9vdChjb25maWc6IEN1cnJlbmN5TWFza0NvbmZpZyk6IE1vZHVsZVdpdGhQcm92aWRlcnM8Tmd4Q3VycmVuY3lNb2R1bGU+IHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IE5neEN1cnJlbmN5TW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbe1xuICAgICAgICBwcm92aWRlOiBDVVJSRU5DWV9NQVNLX0NPTkZJRyxcbiAgICAgICAgdXNlVmFsdWU6IGNvbmZpZyxcbiAgICAgIH1dXG4gICAgfVxuICB9XG59XG4iXX0=